import os
import re
from itertools import chain

def get_pairs(filelist):
    pairs=list()
    
    for f in filelist:
        tmp_n=re.split("_R?[1|2][.|_]", f)[0]
        # print(f,tmp_n)
        r_tmp=re.compile("^{}_R?[1|2][.|_]".format(tmp_n))
        pair_tmp=sorted(list(filter(r_tmp.search, rawr)))
        if pair_tmp not in pairs and len(pair_tmp)==2:
            pairs.append(pair_tmp)
    return pairs
    


# # read the arguments
ind=os.path.realpath(config['ind'])
outd=os.path.realpath(config['outd'])


print("Input directory:\n"+ind)
print("Output directory:\n"+outd)

#create file structure
if not os.path.isdir(outd):
    os.makedirs(outd)
    
    

# check input directory for files
if ind != False:
    job_ids=[]

    # find all the files in the directory
    infiles=os.listdir(ind)

    # find all assbly with ending .fna, .fasta, .fa
    # find all raw reads with ending .fastq.gz, .fastq., .fq, .fq.gz
    assbly=[f for f in infiles if (f.endswith(".fna") or f.endswith(".fasta") or f.endswith(".fa"))]
    rawr=[f for f in infiles if (f.endswith(".fastq.gz") or f.endswith(".fastq") or f.endswith(".fq") or f.endswith(".fq.gz"))]

    # find the matching raw files that have either a _1 _2 or _R1 _R2
    r=re.compile("_R?[1|2][.|_]")
    raw_pairs=get_pairs(list(filter(r.search, rawr)))
    raw_singles=list(set(rawr)-set(chain.from_iterable(raw_pairs)))


# get the ids of the different files (i.e. cut off the extensions)
assbly_ids=sorted([f.rsplit('.', 1)[0] for f in assbly])
# regex split to account for different fine names (e.g., _R1.fastq.gz, _1.fastq.gz)
raw_pairs_ids=sorted([re.split("_R?[1|2][.|_]",f[0])[0] for f in raw_pairs])
raw_singles_ids=sorted([f.rsplit('_SE', 1)[0] for f in raw_singles])


include: "rules/virulencepred_align.smk"
include: "rules/disinfpred_align.smk"
include: "rules/predict.smk"


rule all:
    input:
        outd+"/prediction/combined_predictions_out_numerical.csv",
        outd+"/prediction/combined_predictions_out_categorical.csv"


